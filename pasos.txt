Tp -- Contenedores con Apache y mysql (Carpeta TP1)
1)- Creamos una carpeta contenedor, esta tendra dos carpetas una de php y otra de la base de datos
2)- creamos el contenedor de php este es el comando:
    docker run -d -p 8088:80 -v C:\Users\Diego\Desktop\php\aplicacion-php:/var/www/html php:apache-bullseye ---> posicionarse en la carpeta aplicacion-php
3)- creamos el contenedor de mysl con este comando:
    docker run -d -e MYSQL_ROOT_PASSWORD=root1 -v C:\Users\Diego\Desktop\php\aplicacion-php:/docker-entrypoint-initdb.d -v C:\Users\Diego\Desktop\php\base_de_datos:/var/lib/mysql mysql:debian --> posicionarse en carpeta contenedora de las dos carpetas php y mysql

4)- Despues de todo estos pasos me da este error
    Fatal error: Uncaught Error: Class "mysqli" not found in /var/www/html/index.php:37 Stack trace: #0 {main} thrown in /var/www/html/index.php on line 37

5)- Lo solucione instalando los siguientes contenedores: docker-php-ext-install mysqli  y docker-php-ext-enable mysqli. Estos comandos se instalan en el apache

Listo

Tp2 -- Balanceador de Carga con HAPROXY (Carpeta Balanceador_apache)

1)- Creo una segunda carpeta para mi segunda web, esta contrenda index.php
1.5)- Creo la red con este comando docker network create mynetwork
2)- Creo dos contenedores php con este comando:
	docker run -d --name web1 --network mynetwork -p 8081:80 -v C:\Users\Diego\Desktop\php\aplicacion-php:/var/www/html php:apache-bullseye ---> posicionarse en la carpeta aplicacion-php
	docker run -d --name web2 --network mynetwork -p 8082:80 -v C:\Users\Diego\Desktop\php\aplicacion-php2:/var/www/html php:apache-bullseye ---> posicionarse en la carpeta aplicacion-php2
3)-Ahora creo un contenedor mysql con este comando:
	docker run -d --name mysql --network mynetwork -e MYSQL_ROOT_PASSWORD=root1 -v C:\Users\Diego\Desktop\php\aplicacion-php:/docker-entrypoint-initdb.d -v C:\Users\Diego\Desktop\php\base_de_datos:/var/lib/mysql mysql:debian --> posicionarse en carpeta global
4)- Creo el contenedor de mi haproxy con este comando: 
	docker run -d --name haproxy-container --network mynetwork -p 8085:80 -v C:\Users\Diego\Desktop\php/balanceador/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg haproxy:latest  ----> posicionarse en carpeta goblal
5)- Instalo las dependencias en los contenedores web1 y web2:
    docker exec -it web1 bash
    docker exec -it web2 bash
    apt-get update
    docker-php-ext-install mysqli
    docker-php-ext-enable mysqli


Verificar IP de mysql para cambiar en los archivos.php asi poder tener la conexion completa

Listo

Tp3 -- Balanceador de Carga con sitios nodejs (Carpeta nodejs)

1)- Creo una carpeta contenedora en este caso se llama nodejs

1,5)- Creo una nueva red con este comando: docker network create rednode

2)- Creo 3 carpetas, dos son para el front y uno para el balanceador. Dentro de cada carpeta aplicacion-node estara un servidor basico que muestre un mensaje

3)- Este es el comando que utilice para crear el contenedor, es importante poner el puerto de la misma direccion de port de node que esta en el vscode

docker run --name nodewebuno -p 8090:81 --network rednode -v C:\Users\Diego\Desktop\php\nodejs\aplicacion-node:/usr/src/app -w /usr/src/app -d node:14 bash -c "node index.js" --> Me posiciono en la carpeta de aplicacion-node 

docker run --name nodewebdos -p 8089:81 --network rednode -v C:\Users\Diego\Desktop\php\nodejs\aplicacion-node2:/usr/src/app -w /usr/src/app -d node:14 bash -c "node index.js"--> Me posiciono en la carpeta de aplicacion-node 

4)- Creo ahora mi balanceador de carga con haproxy vincuando a la red dnd estan los dos servidores node

docker run -d --name haproxynode --network rednode -p 8095:81 -v C:\Users\Diego\Desktop\php\nodejs\balanceador/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro haproxy:latest  

Listo

Tp4 -- Crear nuestras propias Imagenes con Dockerfile (Carpeta nodejs)

1)- A la carpeta nodejs en las carpetas aplicacion-node y aplicacion-node2 agrego su .dockerignore para no subir el node_modules y un dockerfile para pasarle el volumen con su puerto determinado el copy y su cmd para poder iniciar la aplicacion

2)-Para el balanceador de no hace falta un dockerfile

Listo 

Tp5 -- 


Tp6 --


Tp7 -- (Carpeta docker swam)
Los pasos de este trabajo practico se encuentra en la misma carpeta

Listo

Tp8 -- (Carpeta docker swarm node/apache)
Los pasos de este practivo se encuentra en la misma carpeta

Listo
	